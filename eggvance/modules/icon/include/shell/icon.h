#pragma once

#include <array>

namespace shell::icon
{

class Pixel
{
public:
    using uint = unsigned int;

    constexpr Pixel(uint data)
        : data(data) {}

    uint x() const { return (data >> 28) & 0x0F; }
    uint y() const { return (data >> 24) & 0x0F; }
    uint r() const { return (data >> 16) & 0xFF; }
    uint g() const { return (data >>  8) & 0xFF; }
    uint b() const { return (data >>  0) & 0xFF; }

private:
    uint data;
};

inline constexpr std::array<Pixel, 194> kPixels =
{
    0x400B0B11,
    0x500B0B11,
    0xB00B0B11,
    0xC00B0B11,
    0x310B0B11,
    0x4126C6DA,
    0x5126C6DA,
    0x610B0B11,
    0xA10B0B11,
    0xB126C6DA,
    0xC126C6DA,
    0xD10B0B11,
    0x220B0B11,
    0x3226C6DA,
    0x4226C6DA,
    0x5226C6DA,
    0x620B0B11,
    0x920B0B11,
    0xA226C6DA,
    0xB226C6DA,
    0xC226C6DA,
    0xD20B0B11,
    0x230B0B11,
    0x3326C6DA,
    0x4342CCDE,
    0x5326C6DA,
    0x6326C6DA,
    0x730B0B11,
    0x930B0B11,
    0xA326C6DA,
    0xB342CCDE,
    0xC326C6DA,
    0xD326C6DA,
    0xE30B0B11,
    0x140B0B11,
    0x2426C6DA,
    0x3426C6DA,
    0x4442CCDE,
    0x5442CCDE,
    0x6426C6DA,
    0x7426C6DA,
    0x840B0B11,
    0x9426C6DA,
    0xA426C6DA,
    0xB442CCDE,
    0xC442CCDE,
    0xD426C6DA,
    0xE40B0B11,
    0x150B0B11,
    0x2526C6DA,
    0x3542CCDE,
    0x4542CCDE,
    0x5542CCDE,
    0x6542CCDE,
    0x7526C6DA,
    0x8526C6DA,
    0x950B0B11,
    0xA50B0B11,
    0xB542CCDE,
    0xC542CCDE,
    0xD526C6DA,
    0xE50B0B11,
    0x060B0B11,
    0x1626C6DA,
    0x2626C6DA,
    0x3642CCDE,
    0x4656D1E2,
    0x5656D1E2,
    0x6642CCDE,
    0x7642CCDE,
    0x8626C6DA,
    0x9626C6DA,
    0xA626C6DA,
    0xB60B0B11,
    0xC60B0B11,
    0xD626C6DA,
    0xE626C6DA,
    0xF60B0B11,
    0x070B0B11,
    0x170B0B11,
    0x2726C6DA,
    0x3742CCDE,
    0x4756D1E2,
    0x5756D1E2,
    0x6756D1E2,
    0x7742CCDE,
    0x8742CCDE,
    0x9742CCDE,
    0xA726C6DA,
    0xB726C6DA,
    0xC726C6DA,
    0xD70B0B11,
    0xE70B0B11,
    0xF70B0B11,
    0x080B0B11,
    0x181A1D21,
    0x280B0B11,
    0x380B0B11,
    0x4856D1E2,
    0x5867D7E6,
    0x6856D1E2,
    0x7856D1E2,
    0x880B0B11,
    0x980B0B11,
    0xA842CCDE,
    0xB842CCDE,
    0xC826C6DA,
    0xD80B0B11,
    0xE82B3137,
    0xF80B0B11,
    0x090B0B11,
    0x191A1D21,
    0x291A1D21,
    0x391D2125,
    0x490B0B11,
    0x5967D7E6,
    0x690B0B11,
    0x790B0B11,
    0x8924292E,
    0x9924292E,
    0xA90B0B11,
    0xB942CCDE,
    0xC90B0B11,
    0xD92B3137,
    0xE92B3137,
    0xF90B0B11,
    0x0A0B0B11,
    0x1A1A1D21,
    0x2A1A1D21,
    0x3A1D2125,
    0x4A1D2125,
    0x5A0B0B11,
    0x6A21252A,
    0x7A21252A,
    0x8A24292E,
    0x9A24292E,
    0xAA24292E,
    0xBA0B0B11,
    0xCA282D32,
    0xDA2B3137,
    0xEA2B3137,
    0xFA0B0B11,
    0x1B0B0B11,
    0x2B1D2125,
    0x3B1D2125,
    0x4B1D2125,
    0x5B21252A,
    0x6B21252A,
    0x7B21252A,
    0x8B24292E,
    0x9B24292E,
    0xAB24292E,
    0xBB282D32,
    0xCB282D32,
    0xDB282D32,
    0xEB0B0B11,
    0x1C0B0B11,
    0x2C1D2125,
    0x3C1D2125,
    0x4C1D2125,
    0x5C21252A,
    0x6C21252A,
    0x7C21252A,
    0x8C21252A,
    0x9C24292E,
    0xAC24292E,
    0xBC282D32,
    0xCC282D32,
    0xDC282D32,
    0xEC0B0B11,
    0x2D0B0B11,
    0x3D0B0B11,
    0x4D1D2125,
    0x5D1D2125,
    0x6D21252A,
    0x7D21252A,
    0x8D21252A,
    0x9D24292E,
    0xAD24292E,
    0xBD24292E,
    0xCD0B0B11,
    0xDD0B0B11,
    0x4E0B0B11,
    0x5E0B0B11,
    0x6E21252A,
    0x7E21252A,
    0x8E21252A,
    0x9E21252A,
    0xAE0B0B11,
    0xBE0B0B11,
    0x6F0B0B11,
    0x7F0B0B11,
    0x8F0B0B11,
    0x9F0B0B11
};

}  // namespace shell::icon
